/5- Using reflection Add class called Automapper that class contains function this function takes
//two generic types and can assign the values of the first object to the second


public class Automapper
  {

    public void Function<T,T2>(T obj1,T2 obj2)
    {
        Type type = typeof(T);
        Type type2 = typeof(T2);
        foreach (PropertyInfo prop in type.GetProperties())
        {
            PropertyInfo prop2 = type2.GetProperty(prop.Name);
            if ( prop2 != null && prop2.PropertyType == prop.PropertyType  )
            {
                prop2.SetValue(obj2, prop.GetValue(obj1));
            }

        }
    }
   
  }
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public Person(string Name,int Age) {
        this.Name = Name;
        this.Age = Age;
    }
}
public class Person2
{
    public string Name { get; set; }
   
    public Person2(string Name)
    {
        this.Name = Name;
    }
}


class Program
{
    
    static void Main()
    {
        Automapper automapper = new Automapper();
      
        Person p1 = new Person("salma", 21);
        Person2 p2 = new Person2("maria");
        automapper.Function<Person, Person2>(p1,p2);

        Console.WriteLine(p2.Name);

    }
}
