using ConsoleApp2;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Xml.Linq;


public class ListNode
{
      public int val;
      public ListNode(int val )
    {
        this.val = val;
    }
 }
   public class AdjecncyListGraph
 
 { 
    Dictionary<ListNode, List<ListNode>> AdjecncyList = new Dictionary<ListNode, List<ListNode>>();
     
    public void AddNode(ListNode node)
    {
        if (!AdjecncyList.ContainsKey(node))
        {
            AdjecncyList[node] = new List<ListNode>();
        }
        else
            Console.WriteLine("already exist");

    }

    public void AddEdge(ListNode node1,ListNode node2)
    {
        if(!AdjecncyList.ContainsKey(node1))
        {
            AddNode(node1);
        }
        if (!AdjecncyList.ContainsKey(node2))
        {
            AddNode(node2);
        }
        AdjecncyList[node1].Add(node2);
        AdjecncyList[node2].Add(node1);
    }

    public void GetNeighbors(ListNode node)
    {
        if (AdjecncyList[node].Count != 0)
        {
            foreach (ListNode n in AdjecncyList[node])
            {
                Console.WriteLine(n.val);
            }
        }
        else
            Console.WriteLine("No Neighbors");
    }

    public void DisplayAdjecenyList()
    {
        foreach(var pair in AdjecncyList)
        {
            Console.Write(pair.Key.val+": ");
            foreach(ListNode n in pair.Value)
            {
                Console.Write(n.val+"-->");
            }
            Console.WriteLine();
        }

    }
}

class Program
{
    static void Main()
    {
        ListNode listNode = new ListNode(2);
        ListNode listNode1 = new ListNode(1);
        ListNode listNode2 = new ListNode(3);
        AdjecncyListGraph adjecncyListGraph = new AdjecncyListGraph();
        adjecncyListGraph.AddNode(listNode);
        adjecncyListGraph.AddNode(listNode1);

        adjecncyListGraph.AddEdge(listNode, listNode2);
        adjecncyListGraph.AddEdge(listNode, listNode1);

        adjecncyListGraph.GetNeighbors(listNode2);

        adjecncyListGraph.DisplayAdjecenyList();

        


    }
}